import { OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect } from "@nestjs/websockets";
import { Server, Socket } from "socket.io";
import { ChatService } from "./chat.service";
import { CreateChatDto } from "./dto/create-chat.dto";
import { Users } from "src/api/user/entities/user.entity";
import { RoomService } from "src/api/room/rooms.service";
import { CreateRoomDto } from "./dto/create-room.dto";
import { NotificationService } from "src/api/notification/notification.service";
export declare class ChatGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
    private readonly chatService;
    private readonly roomService;
    private readonly notificationService;
    constructor(chatService: ChatService, roomService: RoomService, notificationService: NotificationService);
    private logger;
    server: Server;
    private clients;
    private chat_clients;
    getUserId(socketId: string): string;
    getSocketIdByUserId(userId: number): string | number;
    joinChattingRoom(userId: string, roomId: string): void;
    leaveChattingRoom(userId: string, roomId: string): void;
    IsNotJoinChatList(roomId: number): boolean;
    printConnectedClients(): void;
    updateConfirmtiome(userId: string): string;
    afterInit(): void;
    validationUserId(userId: any): boolean;
    handleConnection(socket: Socket): void;
    handleDisconnect(socket: Socket): void;
    handleLogin(socket: Socket, userId: string): Promise<void>;
    handleLogout(socket: Socket, userId: string): Promise<void>;
    handleJoinRoomEvent(socket: Socket, createRoomDto: CreateRoomDto): Promise<void>;
    handleOutRoomEvent(socket: Socket, roomId: number): Promise<void>;
    handleLeaveRoomEvent(socket: Socket, roomId: number): Promise<void>;
    handleMessageEvent(socket: Socket, msgPayload: CreateChatDto): Promise<void>;
    handlePrintConnectedUser(socket: Socket, roomId: number): Promise<void>;
    sendReviewNotification(seller: Users, buyer: Users, review: string): Promise<void>;
}
